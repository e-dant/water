#! /usr/bin/env bash

# xray (for bones).

xray::help() {
  echo '# xray'
  echo
  echo '## usage'
  echo
  echo '```'
  echo '  xray'
  echo '    < --what | --where >'
  echo '    [ --friskroot ]'
  echo '```'
  echo
  echo '## summary'
  echo
  echo '  - `--what`:'
  echo '    show what (unique) bones'
  echo '    exist.'
  echo
  echo '  - `--where`:'
  echo '    show where the bones are'
  echo '    (as relative paths).'
  echo
  echo '## terminology'
  echo
  echo '  - *bones*:'
  echo '    mustache-like templates.'
  echo
  echo '## use cases'
  echo
  echo '  - creating new projects,'
  echo '    especially from such a'
  echo '    skeleton as this.'
  echo '  - handling projects that'
  echo '    contain very simple'
  echo '    mustaches.'
  echo
  echo '## examples'
  echo '  - show what bones exist in'
  echo '    the current project:'
  echo
  echo '```
  xray --where --friskroot
  ./.tell
  ./README.md
  ./build/.tell
  ./build/README.md
  ./build/in/.tell
  ./build/in/README.md
  ./build/in/animate.sh
  ./build/in/bones/.tell
  ./build/in/build.sh
  ./build/out/.tell
  ./include/.tell
  ./include/README.md
  ./src/.tell
  ./src/README.md'
  echo '```'
  echo
  echo '  - show where the bones in'
  echo '    this path and below are:'
  echo
  echo '```
  xray --where
  ./.tell
  ./README.md
  ./animate.sh
  ./bones/.tell
  ./build.sh'
  echo '```'
}

# - it is important to remember
#   where we come from
lastdir="$PWD"
#   and who we are.
ourself="$(basename "$0")"
#   otherwise, we might end up
#   somewhere else.

# - it is important to remember
#   where we should be
grep -q -- '--friskroot' \
  <<< "$*" \
  && cd "`dirname "$0"`/.."
#   and how to get back there.
thisdir="$PWD"

xray::scan() {
  local filter=$@
  grep -Ero --exclude "$ourself" -- \
    '{{.+}}' "$PWD" \
    | eval $filter
}

xray::what() {
  # - grab this skeleton's bones,
  #   which are similar to mustaches
  #   in appearance and behavior.
  #   - exclude: ourself
  #   - E: extended regex
  #   - r: recursive search
  #   - o: print only matching
  # - ignore anything before "{{",
  #   such as the filename.
  # - sort the bones (sort lines,
  #   alphabetically).
  # - filter duplicate lines.
  local filter="sed -E 's/(.+)(:)({{.*)/\3/g' | sort | uniq"
  xray::scan "$filter"
}

xray::where() {
  # - grab this skeleton's bones,
  #   which are similar to mustaches
  #   in appearance and behavior.
  #   - exclude: ourself
  #   - E: extended regex
  #   - r: recursive search
  #   - o: print only matching
  # - filter bones from paths in lines:
  #   ignore anything after and
  #   including "{{".
  # - sort the bones (sort lines,
  #   alphabetically).
  # - filter duplicate lines.
  local filter="sed -E 's/(.+)(:)({{.*)/\1/g' | sort | uniq"
  xray::scan "$filter"
}

xray::parse() {
  local _this="${FUNCNAME[0]%%::*}"
  test $# -eq 0 && {
    echo "$_this::help ; return 1"
  }
  local args=($@)
  for ((i=0;i<$#;i++)); do
    local arg="$(echo -n "${args[$i]}" | tr -d '-')"
    if echo ${args[i]} | grep -q -- "--"; then
      echo "$_this::$arg ${args[i+1]}"
      i=$((i+1))
    else
      echo "$_this::$arg"
    fi
  done
}

xray() {
  local _this="${FUNCNAME[0]%%::*}"
  while read -r line; do
    eval $line
  done <<< $($_this::parse $@)
}

# perform the xray
xray "$@"
retval=$?

# and go back to where we were.
cd "$lastdir"

exit $retval